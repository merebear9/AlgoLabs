import java.util.Arrays;
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {

        if (intervals == null || intervals.length == 0) {
            return 0;
        }

        // Sort the intervals based on their end points
        Arrays.sort(intervals, (a, b) -> a[1] - b[1]);

        int count = 0;
        int end = intervals[0][1]; // End point of the first interval

        // Iterate through the sorted intervals
        for (int i = 1; i < intervals.length; i++) {
            int start = intervals[i][0]; // Start point of the current interval
            
            // If the start point of the current interval is less than the end point of the previous interval,
            // it means they overlap. Increment the count.
            if (start < end) {
                count++;
            } else {
                // If they don't overlap, update the end point to the end point of the current interval.
                end = intervals[i][1];
            }
        }

        return count;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] intervals1 = {{1,2},{2,3},{3,4},{1,3}};
        int[][] intervals2 = {{1,2},{1,2},{1,2}};
        int[][] intervals3 = {{1,2},{2,3}};
        System.out.println(solution.eraseOverlapIntervals(intervals1)); // Output: 1
        System.out.println(solution.eraseOverlapIntervals(intervals2)); // Output: 2
        System.out.println(solution.eraseOverlapIntervals(intervals3)); // Output: 0
    }
}
        
    
