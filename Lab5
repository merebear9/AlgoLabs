import java.util.Arrays;

class Solution {
    public int findMinArrowShots(int[][] points) {
        if (points == null || points.length == 0) {
            return 0;
        }

        Arrays.sort(points, (a, b) -> Integer.compare(a[1], b[1]));

        int arrows = 1;
        long end = points[0][1];

        for (int i = 1; i < points.length; i++) {
            long start = points[i][0];
            long currentEnd = points[i][1];

            if (start > end) {
                arrows++;
                end = currentEnd;
            }
        }

        return arrows;
    }

    public static void main(String[] args) {
        Solution solution = new Solution();
        int[][] points1 = {{10,16},{2,8},{1,6},{7,12}};
        int[][] points2 = {{1,2},{3,4},{5,6},{7,8}};
        int[][] points3 = {{1,2},{2,3},{3,4},{4,5}};
        int[][] points4 = {{-2147483646,-2147483645},{2147483646,2147483647}};
        System.out.println(solution.findMinArrowShots(points1)); // Output: 2
        System.out.println(solution.findMinArrowShots(points2)); // Output: 4
        System.out.println(solution.findMinArrowShots(points3)); // Output: 2
        System.out.println(solution.findMinArrowShots(points4)); // Output: 2
    }
}
