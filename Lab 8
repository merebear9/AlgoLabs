
class Job {
    constructor(startTime, endTime, profit) {
        this.startTime = startTime;
        this.endTime = endTime;
        this.profit = profit;
    }
}

function jobScheduling(startTime, endTime, profit) {
    const n = startTime.length;
    const jobs = [];

    // Create Job objects and sort them based on end time
    for (let i = 0; i < n; i++) {
        jobs.push(new Job(startTime[i], endTime[i], profit[i]));
    }
    jobs.sort((a, b) => a.endTime - b.endTime);

    // Initialize an array to store the maximum profit up to each job
    const dp = new Array(n + 1).fill(0);

    for (let i = 1; i <= n; i++) {
        // Find the latest job that doesn't overlap with the current job
        const prevJob = binarySearch(jobs, i);

        // Calculate the maximum profit by either including the current job or excluding it
        dp[i] = Math.max(dp[i - 1], dp[prevJob] + jobs[i - 1].profit);
    }

    // Return the maximum profit
    return dp[n];
}

function binarySearch(jobs, index) {
    let low = 0, high = index - 1;
    while (low <= high) {
        const mid = Math.floor((low + high) / 2);
        if (jobs[mid].endTime <= jobs[index - 1].startTime) {
            if (jobs[mid + 1].endTime <= jobs[index - 1].startTime) {
                low = mid + 1;
            } else {
                return mid + 1;
            }
        } else {
            high = mid - 1;
        }
    }
    return 0;
}

// Example usage:
const startTime = [1, 2, 3, 3];
const endTime = [3, 4, 5, 6];
const profit = [50, 10, 40, 70];
console.log(jobScheduling(startTime, endTime, profit)); // Output: 120
